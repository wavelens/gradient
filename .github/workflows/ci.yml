name: "Continuous Integration"
on:
  pull_request:
  push:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: gradient
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    
    - name: Check formatting
      run: |
        # Check Rust formatting
        find . -name "*.rs" -not -path "./target/*" -not -path "./.git/*" | xargs -I {} nix shell nixpkgs#rustfmt --command rustfmt --check {}
        
        # Check Nix formatting
        find . -name "*.nix" -not -path "./.git/*" | xargs -I {} nix shell nixpkgs#nixpkgs-fmt --command nixpkgs-fmt --check {}
        
        # Check Python formatting
        find . -name "*.py" -not -path "./.git/*" | xargs -I {} nix shell nixpkgs#black --command black --check {}
    
    - name: Lint code
      run: |
        # Rust clippy
        if [ -f "Cargo.toml" ]; then
          nix shell nixpkgs#cargo nixpkgs#rustc --command cargo clippy -- -D warnings
        fi
        
        # Python flake8
        find . -name "*.py" -not -path "./.git/*" | xargs -I {} nix shell nixpkgs#python3Packages.flake8 --command flake8 {}

  security-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    
    - name: Rust security audit
      run: |
        if [ -f "Cargo.toml" ]; then
          nix shell nixpkgs#cargo-audit --command cargo audit
        fi
    
    - name: Python security audit
      run: |
        if [ -f "requirements.txt" ] || find . -name "*.py" | head -1; then
          nix shell nixpkgs#python3Packages.safety --command safety check || true
        fi
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        component:
          - gradient-server
          - gradient-frontend
          - gradient-cli
      fail-fast: false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: gradient
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        
    - name: Build ${{ matrix.component }}
      run: |
        nix build .#${{ matrix.component }} --print-build-logs
        
    - name: Test ${{ matrix.component }}
      run: |
        nix shell .#${{ matrix.component }} --command ${{ matrix.component }} --version || echo "Version check not available"

  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    needs: [build-and-test]
    strategy:
      matrix:
        test:
          - gradient-api
          - gradient-building
          - gradient-frontend
          - gradient-mail
          - gradient-oidc
          - gradient-remote
      fail-fast: false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
          max-jobs = 2
          cores = 2
    
    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: gradient
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        
    - name: Run integration test - ${{ matrix.test }}
      run: |
        nix build .#checks.x86_64-linux.${{ matrix.test }} --print-build-logs
      timeout-minutes: 60
      
    - name: Upload test logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-logs-${{ matrix.test }}
        path: |
          /tmp/nix-build-*/
        retention-days: 7

  docker-build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-and-test]
    if: github.event_name == 'push' || github.event_name == 'release'
    strategy:
      matrix:
        component:
          - gradient-server
          - gradient-frontend
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: gradient
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build Docker image for ${{ matrix.component }}
      run: |
        # Build component
        nix build .#${{ matrix.component }}
        
        # Create Dockerfile
        cat > Dockerfile.${{ matrix.component }} << EOF
        FROM nixos/nix:latest
        COPY result /app
        WORKDIR /app
        EXPOSE 3000
        CMD ["/app/bin/${{ matrix.component }}"]
        EOF
        
        # Build and tag image
        docker build -f Dockerfile.${{ matrix.component }} -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:${{ github.sha }} .
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest
    
    - name: Push Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest

  release:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [integration-tests, docker-build]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: gradient
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    
    - name: Build release artifacts
      run: |
        nix build .#gradient-server --print-build-logs
        nix build .#gradient-frontend --print-build-logs
        nix build .#gradient-cli --print-build-logs
        
        # Create release archive
        mkdir -p release
        cp -r result-* release/
        tar -czf gradient-${{ github.event.release.tag_name }}.tar.gz release/
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./gradient-${{ github.event.release.tag_name }}.tar.gz
        asset_name: gradient-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

  documentation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Build documentation
      run: |
        # Check for documentation files
        find . -name "*.md" -type f -exec echo "Found documentation: {}" \;
        
        # Validate markdown
        if command -v markdownlint; then
          find . -name "*.md" -type f -exec markdownlint {} \;
        fi
    
    - name: Deploy documentation
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        enable_jekyll: false